q()
install.packages("emmeans")
library(RTseries)
BestBuySales <- read.csv(RTseriesExtDataPath("BestBuySalesRegdat.csv"))
BestBuySales.tsd <- tsd(ts(BestBuySales$MillionsOfDollars, frequency=4, start=2000), data.title='Best Buy Quarterly Sales 2000-2012',
response.units='Millions of Dollars', time.units='Year')
BestBuySales.tsd
plot(BestBuySales.tsd)
BestBuySales.ts <- ts(BestBuySales$MillionsOfDollars, frequency=4, start=2000)
plot(stl(BestBuySales.ts^(0.25),s.window = 'periodic'))
shaded.tsplot(BestBuySales.ts, top = TRUE)
shaded.tsplot(BestBuySales.ts)
shaded.tsplot(BestBuySales.ts, top = TRUE)
plot(BestBuySales.tsd)
aded.tsplot(BestBuySales.ts, top = TRUE, ylabel = 'Millions of Dollars')
shaded.tsplot(BestBuySales.ts, top = TRUE, ylabel = 'Millions of Dollars')
shaded.tsplot(BestBuySales.ts, top = TRUE, ylab = 'Millions of Dollars')
shaded.tsplot(BestBuySales.tsd, top = TRUE)
shaded.tsplot(BestBuySales.tsd)
library(RTseries)
5+5
0.1 + 0.2 == 0.3
knitr::opts_chunk$set(echo = TRUE)
is.vector(list(1,2,3))
is.numeric(c(1L,2L,3L))
typeof(as.numeric(c(1L,2L,3L)))
c(1, FALSE)
typeof(is.vector(list(1,2,3)))
y <- c(5.4, 6.2, 7.1, 4.8, 7.5, 6.2)
names(y) <- c('a', 'b', 'c', 'a', 'e', 'a')
x  <- y
all.equal(x, 6.2)
all.equal(y, 6.2)
y <- c(5.4, 6.2, 7.1, 4.8, 7.5, 6.2)
names(y) <- c('a', 'b', 'c', 'a', 'e', 'a')
x  <- y
all.equal x[(x, 6.2)]
y <- c(5.4, 6.2, 7.1, 4.8, 7.5, 6.2)
names(y) <- c('a', 'b', 'c', 'a', 'e', 'a')
x  <- y
all.equalx[(x, 6.2)]
y <- c(5.4, 6.2, 7.1, 4.8, 7.5, 6.2)
names(y) <- c('a', 'b', 'c', 'a', 'e', 'a')
x  <- y
all.equal[(x, 6.2)]
y <- c(5.4, 6.2, 7.1, 4.8, 7.5, 6.2)
names(y) <- c('a', 'b', 'c', 'a', 'e', 'a')
x  <- y
all.equal(x, 6.2)
x <- c(5.4, 6.2, 7.1, 4.8, 7.5, 6.2)
names(x) <- c('a', 'b', 'c', 'd', 'e', 'f')
x[-(2:4)]
x <- c(5.4, 6.2, 7.1, 4.8, 7.5, 6.2)
names(x) <- c('a', 'b', 'c', 'd', 'e', 'f')
x[-2:4]
x <- c(5.4, 6.2, 7.1, 4.8, 7.5, 6.2)
names(x) <- c('a', 'b', 'c', 'd', 'e', 'f')
-x[2:4]
x <- c(5.4, 6.2, 7.1, 4.8, 7.5, 6.2)
names(x) <- c('a', 'b', 'c', 'd', 'e', 'f')
x[(-2:4)]
x <- c(5.4, 6.2, 7.1, 4.8, 7.5, 6.2)
names(x) <- c('a', 'b', 'c', 'd', 'e', 'f')
x[(-2:4)]
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.20")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.20")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.20")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.20")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.20")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.20")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
library(installr)
install.packages("installr")
library(installr)
updateR()
R.version.string
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.20")
setwd("C:/Users/seren/OneDrive/Desktop/BCB546_R/Peer-Review/Faizo/BCB546-R-assignment")
# Clear environment
rm(list = ls())
# Closes the current graphics device
# dev.off()
# Clear environment
# rm(list = ls())
# Closes the current graphics device
# dev.off()
# Set working directory (update this path to your directory)
setwd("C:/Users/DELL/OneDrive/Desktop/bcb546/EEOB lesson")
# Set working directory (update this path to your directory)
setwd("C:/Users/seren/OneDrive/Desktop/BCB546_R/Peer-Review/Faizo/BCB546-R-assignment")
# Load required libraries
library(dplyr)
library(tidyr)
library(readr)
library(tidyverse)
# Read genotype and SNP position data
fang_et_al_genotypes <- read.table("fang_et_al_genotypes.txt", sep = "\t", header = TRUE)
snp_position <- read.table("snp_position.txt", sep = "\t", header = TRUE)
# Set working directory (update this path to your directory)
setwd("C:/Users/seren/OneDrive/Desktop/BCB546_R/Peer-Review/Faizo/BCB546-R-assignment")
# Load required libraries
library(dplyr)
library(tidyr)
library(readr)
library(tidyverse)
# Read genotype and SNP position data
fang_et_al_genotypes <- read.table("fang_et_al_genotypes.txt", sep = "\t", header = TRUE)
snp_position <- read.table("snp_position.txt", sep = "\t", header = TRUE)
# Clear environment
# rm(list = ls())
# Closes the current graphics device
# dev.off()
# Set working directory (update this path to your directory)
setwd("C:/Users/seren/OneDrive/Desktop/BCB546_R/Peer-Review/Faizo/BCB546-R-assignment")
# Load required libraries
library(dplyr)
library(tidyr)
library(readr)
library(tidyverse)
# Read genotype and SNP position data
fang_et_al_genotypes <- read.table("fang_et_al_genotypes.txt", sep = "\t", header = TRUE)
snp_position <- read.table("snp_position.txt", sep = "\t", header = TRUE)
### This shows the dimension of the dataframe
dim(fang_et_al_genotypes)
dim(snp_position)
### This shows the summary of each data set
colnames(fang_et_al_genotypes)
colnames(snp_position)
sapply(fang_et_al_genotypes, class)
sapply(snp_position, class)
is.data.frame(fang_et_al_genotypes)
is.data.frame(snp_position)
file.info("fang_et_al_genotypes")
file.info("snp_position.txt")
sum(is.na(fang_et_al_genotypes))
sum(is.na(snp_position))
cor(snp_position[sapply(snp_position, is.numeric)])
any(is.na(fang_et_al_genotypes))
any(is.na(snp_position))
any(duplicated(fang_et_al_genotypes))
any(duplicated(snp_position))
# Clear environment
# rm(list = ls())
# Closes the current graphics device
# dev.off()
# Set working directory (update this path to your directory)
setwd("C:/Users/seren/OneDrive/Desktop/BCB546_R/Peer-Review/Faizo/BCB546-R-assignment")
# Load required libraries
library(dplyr)
library(tidyr)
library(readr)
library(tidyverse)
# Read genotype and SNP position data
fang_et_al_genotypes <- read.table("fang_et_al_genotypes.txt", sep = "\t", header = TRUE)
snp_position <- read.table("snp_position.txt", sep = "\t", header = TRUE)
### This shows the dimension of the dataframe
dim(fang_et_al_genotypes)
dim(snp_position)
### This shows the summary of each data set
colnames(fang_et_al_genotypes)
colnames(snp_position)
sapply(fang_et_al_genotypes, class)
sapply(snp_position, class)
is.data.frame(fang_et_al_genotypes)
is.data.frame(snp_position)
file.info("fang_et_al_genotypes")
file.info("snp_position.txt")
sum(is.na(fang_et_al_genotypes))
sum(is.na(snp_position))
cor(snp_position[sapply(snp_position, is.numeric)])
any(is.na(fang_et_al_genotypes))
any(is.na(snp_position))
any(duplicated(fang_et_al_genotypes))
any(duplicated(snp_position))
### This line of code copies out the data based on the group into a new file
# Maize_data and teosinte_data
maize_data_group <- fang_et_al_genotypes[fang_et_al_genotypes$Group %in% c("ZMMIL", "ZMMLR", "ZMMMR"), ]
teosinte_data_group <- fang_et_al_genotypes[fang_et_al_genotypes$Group %in% c("ZMPBA", "ZMPIL", "ZMPJA"), ]
# This line of code will arrange the snp_position data frame by SNP_ID
snp_position_Chr <- snp_position[,-c(2,5:15)]
snp_position_arranged <- arrange(snp_position_Chr, SNP_ID)
library(dplyr)
# Remove columns 1 to 3 from the maize_data_group and teosinte_data_group data frame
maize_data_group <- select(maize_data_group, -(1:3))
teosinte_data_group <- select(teosinte_data_group, -(1:3))
# The data will be transposed using this line of code
maize_genotypes_trans <- t(maize_data_group)
teosinte_genotypes_trans <- t(teosinte_data_group)
# Combining snp_position_arranged with teosinte_genotypes_trans at the 1,1 position
teosinte_snp_genotype <- cbind(snp_position_arranged, teosinte_genotypes_trans)
# Combining snp_position_arranged with maize_genotypes_trans at the 1,1 position
maize_snp_genotype <- cbind(snp_position_arranged, maize_genotypes_trans)
# Print the number of rows for each data frame
nrow(maize_genotypes_trans)
nrow(teosinte_genotypes_trans)
nrow(snp_position_arranged)
#This replaces all the ? data with -
maize_snp_genotype <- maize_snp_genotype %>% mutate_all(function(x) gsub("\\?", "\\-",x))
teosinte_snp_genotype <- teosinte_snp_genotype %>% mutate_all(function(x) gsub("\\?", "\\-",x))
#For maize
library(dplyr)
library(readr)
for (i in 1:10) {
print(paste("Processing Chromosome", i))
ascending_data <- maize_snp_genotype %>%
filter(Chromosome == i) %>%
arrange(as.numeric(Position))
descending_data <- maize_snp_genotype %>%
filter(Chromosome == i) %>%
arrange(desc(as.numeric(Position)))
write_tsv(ascending_data, paste("Maize_chr", i, "ascending.txt", sep = "_"))
write_tsv(descending_data, paste("Maize_chr", i, "descending.txt", sep = "_"))
}
for (i in 1:10) {
print(paste("Processing Chromosome", i))
ascending_data <- teosinte_snp_genotype %>%
filter(Chromosome == i) %>%
arrange(as.numeric(Position))
descending_data <- teosinte_snp_genotype %>%
filter(Chromosome == i) %>%
arrange(desc(as.numeric(Position)))
write_tsv(ascending_data, paste("teosinte_chr", i, "ascending.txt", sep = "_"))
write_tsv(descending_data, paste("teosinte_chr", i, "descending.txt", sep = "_"))
}
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(readr)
# Convert Chromosome and Position to numeric and remove missing values
maize_snp_genotype_clean <- maize_snp_genotype %>%
mutate(Chromosome = as.numeric(Chromosome),
Position = as.numeric(Position)) %>%
drop_na()
teosinte_snp_genotype_clean <- teosinte_snp_genotype %>%
mutate(Chromosome = as.numeric(Chromosome),
Position = as.numeric(Position)) %>%
drop_na()
# SNP Distribution Density per Chromosome for Maize
ggplot(data = maize_snp_genotype_clean) +
geom_density(mapping = aes(x = Position, fill = factor(Chromosome)), alpha = 0.6) +
facet_wrap(~factor(Chromosome), scales = "free_x") +
labs(title = "Maize SNP Distribution on Each Chromosome",
x = "Position on Chromosome",
y = "Density",
fill = "Chromosome") +
theme_minimal() +
theme(plot.title = element_text(size = 16, face = "bold"),
axis.title = element_text(size = 14))
# SNP Distribution Density per Chromosome for Teosinte
ggplot(data = teosinte_snp_genotype_clean) +
geom_density(mapping = aes(x = Position, fill = factor(Chromosome)), alpha = 0.6) +
facet_wrap(~factor(Chromosome), scales = "free_x") +
labs(title = "Teosinte SNP Distribution on Each Chromosome",
x = "Position on Chromosome",
y = "Density",
fill = "Chromosome") +
theme_minimal() +
theme(plot.title = element_text(size = 16, face = "bold"),
axis.title = element_text(size = 14))
# SNP Count per Chromosome for Maize and Teosinte
maize_snp_counts <- maize_snp_genotype_clean %>%
group_by(Chromosome) %>%
summarise(SNP_count = n())
teosinte_snp_counts <- teosinte_snp_genotype_clean %>%
group_by(Chromosome) %>%
summarise(SNP_count = n())
# Combine maize and teosinte SNP counts
snp_count_comparison <- bind_rows(
maize_snp_counts %>% mutate(Source = "Maize"),
teosinte_snp_counts %>% mutate(Source = "Teosinte")
)
# Bar plot for SNP counts per chromosome
ggplot(data = snp_count_comparison, aes(x = factor(Chromosome), y = SNP_count, fill = Source)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "SNP Counts by Chromosome for Maize and Teosinte",
x = "Chromosome",
y = "SNP Count",
fill = "Source") +
scale_fill_manual(values = c("Maize" = "#E69F00", "Teosinte" = "#56B4E9")) +
theme_minimal() +
theme(plot.title = element_text(size = 16, face = "bold"),
axis.title = element_text(size = 14),
legend.title = element_text(size = 14))
library(ggplot2)
maize_snp_genotype$Chromosome <- factor(
maize_snp_genotype$Chromosome,
levels = as.character(1:10),
ordered = TRUE
)
ggplot(maize_snp_genotype, aes(x = Chromosome, y = as.numeric(Position), fill = Chromosome)) +
geom_boxplot() +
theme_minimal() +
labs(x = "Chromosome", y = "Position", title = "Boxplot by Chromosome")
library(dplyr)
library(tidyr)
library(ggplot2)
library(tidyverse)
cleaned_fang <- fang_et_al_genotypes %>%
select(-JG_OTU) %>%
pivot_longer(cols = -c(Sample_ID, Group), names_to = "SNP_ID", values_to = "Sequence")
cleaned_fang <- cleaned_fang %>%
mutate(new_sequence = case_when(
Sequence %in% c("A/A", "T/T", "C/C", "G/G") ~ "Homozygous",
Sequence == "?/?" ~ "Missing",
TRUE ~ "Heterozygous"
))
ggplot(cleaned_fang, aes(x = new_sequence, fill = new_sequence)) +
geom_bar() +
theme_bw() +
labs(title = "Distribution of Genotypes", x = "Genotype", y = "Count")
